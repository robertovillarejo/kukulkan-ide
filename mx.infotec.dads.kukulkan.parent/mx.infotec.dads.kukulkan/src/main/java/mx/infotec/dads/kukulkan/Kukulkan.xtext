grammar mx.infotec.dads.kukulkan.Kukulkan with org.eclipse.xtext.common.Terminals

generate kukulkan "http://www.infotec.mx/dads/kukulkan/Kukulkan"

/**
 * Domain Model Rule
 */
domainModel:
	entities+=entity+
	| settings+=option;

	/** 
 * Entity Rule
 *  
 */
entity:
	'entity' name=ID
	('(' tableName=ID ')')?
	('{'
	(fields+=entityField
	(','? fields+=entityField)*)? '}')?;

	/** 
 * Entity Field Rule
 *  
 */
entityField:
	id=ID type=fieldType;

	/** 
 * Field Type Rule
 *  
 */
fieldType:
	stringFieldType
	| numericFieldType
	| booleanFieldType
	| dateFieldType
	| blobFieldType
	| entityType;

	/** 
 * Entity Type Rule
 *  
 */
entityType:
	entity;

	/** 
 * String Field Type Rule
 *  
 */
stringFieldType:
	name=stringType constraints+=stringValidators*;

	/** 
 * String Type Rule
 *  
 */
stringType:
	'String';

	/** 
 * Numeric Field Type Rule
 *  
 */
numericFieldType:
	name=numericTypes constraints+=numericValidators*;

	/** 
 * Numeric Types Rule
 *  
 */
numericTypes:
	INTEGER
	| LONG
	| BIG_DECIMAL
	| FLOAT
	| DOUBLE;

	/** 
 * INTEGER Token
 *  
 */
INTEGER:
	'Integer';

	/** 
 * LONG Token
 *  
 */
LONG:
	'Long';

	/** 
 * BIG_DECIMAL Token
 *  
 */
BIG_DECIMAL:
	'BigDecimal';

	/** 
 * FLOAT Token
 *  
 */
FLOAT:
	'Float';

	/** 
 * DOUBLE Token
 *  
 */
DOUBLE:
	'Double';

	/** 
 * Boolean Field Type Token
 *  
 */
booleanFieldType:
	name=BOOLEAN_TYPE required=requiredValidator*;

	/** 
 * BOOLEAN_TYPE Token
 *  
 */
BOOLEAN_TYPE:
	'Boolean';

	/** 
 * Date Field Type Rule
 *  
 */
dateFieldType:
	type=dateTypes required=requiredValidator?;

	/** 
 * Date Types Rule
 *  
 */
dateTypes:
	DATE
	| LOCAL_DATE
	| ZONED_DATETIME
	| INSTANT;

	/** 
 * DATE Token
 *  
 */
DATE:
	'Date';

	/** 
 * LOCAL_DATE Token
 *  
 */
LOCAL_DATE:
	'LocalDate';

	/** 
 * ZONED_DATETIME Token
 *  
 */
ZONED_DATETIME:
	'ZonedDateTime';

	/** 
 * INSTANT Token
 *  
 */
INSTANT:
	'Instant';

	/** 
 * Blob Field Type Rule
 *  
 */
blobFieldType:
	name=blobTypes constraints+=blobValidators*;

	/** 
 * Blob Types Rule
 *  
 */
blobTypes:
	BLOB
	| ANY_BLOB
	| IMAGE_BLOB
	| TEXT_BLOB;

	/** 
 * BLOB Token
 *  
 */
BLOB:
	'Blob';

	/** 
 * ANY_BLOB Token
 *  
 */
ANY_BLOB:
	'AnyBlob';

	/** 
 * IMAGE_BLOB Token
 *  
 */
IMAGE_BLOB:
	'ImageBlob';

	/** 
 * TEXT_BLOB Token
 *  
 */
TEXT_BLOB:
	'TextBlob';

	/* =========================================================================
 * VALIDATOR
 * ========================================================================= */
stringValidators:
	required=requiredValidator
	| minLenght=minLengthValidator
	| maxLenght=maxLengthValidator
	| pattern=patternValidator;

numericValidators:
	required=requiredValidator
	| minValue=minValidator
	| maxValue=maxValidator;

blobValidators:
	required=requiredValidator
	| minBytesValue=minBytesValidator
	| maxBytesValue=maxBytesValidator;

requiredValidator:
	'required';

minLengthValidator:
	'minlength' '(' INT ')';

maxLengthValidator:
	'maxlength' '(' INT ')';

patternValidator:
	'pattern' '(' PATTERN_VALUE ')';

minValidator:
	'min' '(' INT ')';

maxValidator:
	'max' '(' INT ')';

minBytesValidator:
	'minbytes' '(' INT ')';

maxBytesValidator:
	'maxbytes' '(' value=INT ')';

cardinality:
	ONE_TO_MANY
	| MANY_TO_ONE
	| ONE_TO_ONE
	| MANY_TO_MANY;

	/* =========================================================================
 * OPTION 
 * ========================================================================= */
option:
	setting=optionSetting;

optionSetting:
	dtoOption;
	/* =========================================================================
 * DTO OPTION 
 * ========================================================================= */
dtoOption:
	'dto'?;

dtoType:
	'mapstruct';

PATTERN_VALUE:
	'"'* '"';

ONE_TO_MANY:
	'OneToMany';

MANY_TO_ONE:
	'ManyToOne';

ONE_TO_ONE:
	'OneToOne';

MANY_TO_MANY:
	'ManyToMany';